
LOADMEM # test 5
zero r1
ldi r1 20
jr r1 5
CHECKMEM
r0: 0
r1: 20
r2: 0
r3: 0
r4: 0
r5: 0
r6: 0
r7: 0
pc: 25
END

LOADMEM # test 6
zero r1
ldi r1 20
jr r1 -5
CHECKMEM
r0: 0
r1: 20
r2: 0
r3: 0
r4: 0
r5: 0
r6: 0
r7: 0
pc: 15
END

LOADMEM # test 7
zero r1
j 25
CHECKMEM
r0: 0
r1: 0
r2: 0
r3: 0
r4: 0
r5: 0
r6: 0
r7: 0
pc: 25
END

LOADMEM # test 8
zero r1
jal 25
CHECKMEM
r0: 0
r1: 0
r2: 0
r3: 0
r4: 0
r5: 0
r6: 0
r7: 2
pc: 25
END

LOADMEM # test 13
zero r1
ldi r1 16    # use r1 as array pointer (AP)
ldi r2 1     # use r2 as data
ldi r3 6     # use r3 as boundary condition (6)
sw r2 r1 0   # store data in MEM[AP]
addi r1 r1 1   # AP++
addi r2 r2 1   # data++
blt r2 r3 -4 # repeat while data < boundary: MEM[AP]= data, AP++, data++
zero r1      # reset AP
ldi r1 16
lw r6 r1 0   # Load array [1-5] back to regs in reverse order
lw r5 r1 1
lw r4 r1 2
lw r3 r1 3
lw r2 r1 4
CHECKMEM
r0: 0
r1: 16
r2: 5
r3: 4
r4: 3
r5: 2
r6: 1
r7: 0
END

